CS224 / LAB 7
SECTION 5			SECTION 6
ALP TUĞRUL AĞÇALI		AHMET TUNA BAYKAL
21801799			21803279










B-)
/*
Attention!
Configuration  for push-button project :

Connect portA to DCMotor
Jumpers of portA are : 5V, pull up ( both of the to the left side )

Connect portE to push-buttons
Jumpers of portE are : 3V3, pull up ( top one to right, other to left )


*/



void turnClockWise() {
	PORTAbits.RA2 = 1;
	PORTAbits.RA1 = 0;
}

void turnCounterClockWise() {
	PORTAbits.RA1 = 1;
	PORTAbits.RA2 = 0;

}
void Wait() {
 Delay_ms(1000); // 1 sec wait
}

void main() {

 AD1PCFG = 0xFFFF;

 DDPCON.JTAGEN = 0; // disable JTAG

 TRISA = 0x0000;  //portA is output to DC MOTOR.
 TRISE = 0XFFFF;  //portE is inputs to read push-buttons.
// LATA = 0Xffff;
// LATE = 0X0000;

 // single LED blink
// LATA=0xffff;
// Wait();
// LATA=0x0000;
// Wait();

 while(1)
 {
if (PORTEbits.RE0 && PORTEbits.RE1 ){
	PORTA = 0x0000;
}
else if (PORTEbits.RE0 ) {
        PORTAbits.RA2 = 1;
	PORTAbits.RA1 = 0;
}
else if (PORTEbits.RE1 ) {
        PORTAbits.RA1 = 1;
	PORTAbits.RA2 = 0;
}
else
{
	PORTA = 0x0000;
}

}//while
}//main



--------------------------------------------------------------------------------



D-)
/*
Configuration for the code below:

Connect portA to J1 Port of 4 Digit Seven Segment Module
Jumpers of portA are : 5V, pull down ( top one to left, other to right )

Connect portE to J2 Port of 4 Digit Seven Segment Module
Jumpers of portE are : 5V, pull down ( top one to left, other to right )

*/

// Hexadecimal values for digits in 7 segment
unsigned char binary_pattern[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
int a = 1;      // for first digit of seven segment
int b = 2;	// for second digit of seven segment
int c = 3;	// for third digit of seven segment
int d = 4;	// for forth digit of seven segment
int i;

void main() {

 AD1PCFG = 0xFFFF;      // Configure AN pins as digital I/O
 JTAGEN_bit = 0;        // Disable JTAG

 TRISA = 0x00;  //portA is output to D
 TRISE = 0X00;  //portE is output to AN



 while(1)
 {
	for (i = 0 ; i <500 ; i++) {

if ( d == 10 )
      		  {
      		    d = 1;
      		  }


	// Digit 1
	PORTA = binary_pattern[d];
	PORTE = 0x01;
	Delay_ms(1);


if ( c == 10 )
      		  {
      		    c = 1;
      		  }


     // Digit 2
     PORTA=binary_pattern[c];     // Put 2 to the second digit
     PORTE=0x02;                  // Open second digit
     Delay_ms(1);


if ( b == 10 )
      		  {
      		    b = 1;
      		  }


     // Digit 3
     PORTA=binary_pattern[b];
     PORTE=0x04;
     Delay_ms(1);

if ( a == 10 )
      		  {
      		    a = 1;
      		  }


     // Digit 4
     PORTA=binary_pattern[a];
     PORTE=0x08;
     Delay_ms(1);
	} // for ends
	a++;
	b++;
	c++;
	d++;

 } // while ends

}//main







-------------------------------------------------------------------------------------




F-)
/*
Attention!
Configuration  for push-button project :

Connect portA to LEDs
Jumpers of portA are : 5V, pull up ( both of the to the left side )

Connect portE to push-buttons
Jumpers of portE are : 3V3, pull up ( top one to right, other to left )

*/



void Wait() {
 Delay_ms(1000);
}
int i = 8;
int a = 0;
int b = 0;
int c = 0;
int d = 0;
int x = 0x00;

void main() {

 AD1PCFG = 0xFFFF;

 DDPCON.JTAGEN = 0; // disable JTAG

 TRISA = 0x0000;  //portA is output to turn on LEDs.
 TRISE = 0XFFFF;  //portE is inputs to read push-buttons.

 //LATA = 0Xffff;
 //LATE = 0X0000;

 // single LED blink
 /*LATA=0xffff;
 Wait();
 LATA=0x0000;
 Wait(); */


 while(1)
 {
	if(!PORTEbits.RE0 ) {
	x = 0x0000;
	while(1){
	//LATA = 0x00;
	Wait();
	x++;
        PORTA = ~x;
        PORTA;
	Wait();
	if(!PORTEbits.RE2 || !PORTEbits.RE1 ) {
        break;
        }
}
}
else if(!PORTEbits.RE1 ) {
        x = 0x00;
	while(1){
	//LATA = 0x00;
	Wait();
	x++;
        PORTA = ~x;
        a =  PORTAbits.RA7;
        b =  PORTAbits.RA6;
        c =  PORTAbits.RA5;
        d =  PORTAbits.RA4;
        PORTAbits.RA7 = PORTAbits.RA0;
        PORTAbits.RA6 = PORTAbits.RA1;
        PORTAbits.RA5 = PORTAbits.RA2;
        PORTAbits.RA4 = PORTAbits.RA3;
        PORTAbits.RA0 = 1;
        PORTAbits.RA1 = b;
        PORTAbits.RA2 = c;
        PORTAbits.RA3 = d;
        PORTA;
	Wait();
	if(!PORTEbits.RE2 || !PORTEbits.RE0 ) {
        break;
        }
}
}
else if(PORTEbits.RE2 ) {
		PORTA = 0x0000;
		PORTA;
}
else{

}




}//while

}//main