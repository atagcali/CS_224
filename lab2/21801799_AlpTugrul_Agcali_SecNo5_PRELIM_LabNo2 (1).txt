CS224
Lab No 2
Section No 5
Alp Tuğrul Ağçalı
21801799
Date 4.03.2022





## SHIFT


	.text		
	.globl __start
 
__start:
	la $a0, askNumber		# Ask number to user
	li $v0, 4		
	syscall

	li $v0, 5		
	syscall
	
	move $s0, $v0			# s0 = number.
	
	la $a0, endl	 		#End line
	li $v0, 4
	syscall
	
	la $a0, numberinhex		# Number in hexadecimal
	li $v0, 4		
	syscall
	
	move $a0, $s0
	li $v0, 34
	syscall
	
	la $a0, endl	 		#End line
	li $v0, 4
	syscall
	
	
	la $a0,	askShiftAm		# Ask shiftAmount to user
	li $v0, 4		
	syscall

	li $v0, 5		
	syscall
	
	move $a1, $v0			# a1 = shiftAmount.
	
	la $a0, endl	 		#End line
	li $v0, 4
	syscall
	
	la $a0, shaminhex		# Shift amount in hexadecimal
	li $v0, 4		
	syscall
	
	move $a0, $a1
	li $v0, 34
	syscall
	
	la $a0, endl	 		#End line
	li $v0, 4
	syscall
	
	move $a0 ,$s0	
	jal slc
	
	la $a0, endl	 		#End line
	li $v0, 4
	syscall
	
	move $a0 ,$s0	
	jal src
	
	
	
	li $v0, 10
	syscall
	
		
			



				
						
								
slc:	
	addi $s1, $0, 32 		# totalbit = 32 
	sub $s2, $s1, $a1 		# totalbit - shiftamount = numbersshifting
	srlv $s3, $a0, $s2 		# s2 = numbers going to shift right
	sllv $s4, $a0, $a1		# s3 = new number without circle
	add $s4 , $s4, $s3		# s4 = new number 

	la $a0, slcop			# output
	li $v0, 4
	syscall
	move $v0, $s4
	move $a0, $v0
	li $v0, 34
	syscall
	

	jr $ra
			
src:	
	addi $s1, $0, 32 		# totalbit = 32 
	sub $s2, $s1, $a1 		# totalbit - shiftamount = numbersshifting
	sllv $s3, $a0, $s2 		# s2 = numbers going to shift right
	srlv $s4, $a0, $a1		# s3 = new number without circle
	add $s4 , $s4, $s3		# s4 = new number 

	la $a0, srcop			# output
	li $v0, 4
	syscall
	move $v0, $s4
	move $a0, $v0
	li $v0, 34
	syscall
	

	jr $ra








		.data
askNumber:	.asciiz "Please enter the Number "
askShiftAm:	.asciiz "Please enter the shift amount. "
endl	:	.asciiz "\n"
numberinhex:	.asciiz "Number in hexadecimal "
shaminhex:	.asciiz "Shift amount in hexadecimal "
slcop	:	.asciiz "SLC output is "
srcop 	:	.asciiz "SRC output is "











-----------------------------------------------------------------------------------------


##Array Processing


	.text		
	.globl __start
 
__start:
	
	jal createArray		# s0 = array adress
	
	move $a0, $v0
	move $a1, $v1
	
	jal processSortedArray
	
	
	li $v0, 10
	syscall
	
	
	
	
	

createArray:
	la $a0, askSize		# Ask size of array
	li $v0, 4		
	syscall

	li $v0, 5		
	syscall
	
	move $s0, $v0		# s0 = size of array
	sll $s0, $s0, 2 
	
	move $a0, $v0
	li $v0, 9  		# allocate dynamic memory
	syscall
	
	move $v1, $v0  		# v1 = adress of array
	
	srl $s0, $s0, 2 
	add $s1, $0, $0	# s1 = i
	addi $sp, $sp, -4
	sw $v1, 0($sp) 
	  
	j loopcheck
	loop:
		la, $a0, askElement
		li $v0, 4
		syscall
		
		li $v0, 5
		syscall
		
		move $s2, $v0		# s2 = new element
		sw $s2, 0($v1)   	# element gets in array
		
		addi $s1, $s1, 1
		addi $v1, $v1, 4
		
	loopcheck: blt $s1, $s0, loop
	
	lw $v0, 0($sp)		# v0 = adress of array
	move $v1, $s0
	
	jr $ra
		
			
processSortedArray:
	
	addi $sp, $sp, -8
	sw $a0, 0($sp)	
	sw $ra, 4($sp)
	
	jal min
	
	lw $a0, 0($sp)	
	lw $ra, 4($sp)
	addi $sp, $sp, 8
	
	addi $sp, $sp, -8
	sw $a0, 0($sp)	
	sw $ra, 4($sp)
	
	jal max
	
	lw $a0, 0($sp)	
	lw $ra, 4($sp)
	addi $sp, $sp, 8	
	
	addi $sp, $sp, -8
	sw $a0, 0($sp)	
	sw $ra, 4($sp)
	
	jal sum
	
	lw $a0, 0($sp)	
	lw $ra, 4($sp)
	addi $sp, $sp, 8				
			
	addi $sp, $sp, -8
	sw $a0, 0($sp)	
	sw $ra, 4($sp)
	
	jal palindrome
	
	lw $a0, 0($sp)	
	lw $ra, 4($sp)
	addi $sp, $sp, 8
			
	jr $ra			
							
min:				# a0 is array adress, a1 is array size
	add $s1, $0, $0		# s1 = i
	lw $s2, 0($a0)      	# s2 = min
	
	j loopcheck1
	
	loop1:
	lw $s7, 0($a0)
	bge $s7, $s2, pass
	move $s2, $s7
	pass:
	addi $a0, $a0, 4
	addi $s1, $s1, 1
	loopcheck1: blt $s1, $a1, loop1
	
	la $a0, opmin
	li $v0, 4
	syscall
	
	move $a0, $s2
	li $v0, 1
	syscall 
	
	la $a0, endl
	li $v0, 4
	syscall
	
	jr $ra
	
max:  				# a0 is array adress, a1 is array size
	add $s1, $0, $0		# s1 = i
	lw $s2, 0($a0)      	# s2 = min
	
	j loopcheck2
	
	loop2:
	lw $s7, 0($a0)
	ble $s7, $s2, pass1
	move $s2, $s7
	pass1:
	addi $a0, $a0, 4
	addi $s1, $s1, 1
	loopcheck2: blt $s1, $a1, loop2
	
	la $a0, opmax
	li $v0, 4
	syscall
	
	move $a0, $s2
	li $v0, 1
	syscall 
	
	la $a0, endl
	li $v0, 4
	syscall
	
	jr $ra
	
sum: 	
	add $s1, $0, $0		# s1 = i
	add $s2, $0, $0      	# s2 = sum
	
	j loopcheck3
	
	loop3:
	lw $s7, 0($a0)
	add $s2, $s2, $s7
	addi $a0, $a0, 4
	addi $s1, $s1, 1
	loopcheck3: blt $s1, $a1, loop3
	
	la $a0, opsum
	li $v0, 4
	syscall
	
	move $a0, $s2
	li $v0, 1
	syscall 
	
	la $a0, endl
	li $v0, 4
	syscall
	
	jr $ra
	
palindrome:
	addi $s7, $0, 1
	add $s1, $0, $0		# s1 = i
	srl $s2, $a1, 1
	#	# s2 = loopamount
	sll $s3, $a1, 2		# s3 = byte dif btw first and last
	addi $s3, $s3, -4
	add $s4, $a0, $s3	# s4 = addr of last
	j loopcheck4
	
	loop4:
	lw $s5, 0($s4)
	lw $s6, 0($a0)
	beq $s5, $s6, pass2
	add $s7, $0, $0
	j done
	pass2:
	addi $a0, $a0, 4
	addi $s1, $s1, 1
	addi $s4, $s4, -4
	loopcheck4: blt $s1, $s2, loop4	
	done:
	
	la $a0, palop
	li $v0, 4
	syscall
	
	move $a0, $s7
	li $v0, 1
	syscall 
	
	la $a0, endl
	li $v0, 4
	syscall
	
	move $v0, $s7
	
	jr $ra


	.data
askSize:	.asciiz "Please enter the size of array. "
askElement:	.asciiz "Please enter the number. "
opmin:		.asciiz "Minimum element is "
opmax:		.asciiz "Maximum element is "
endl:		.asciiz "\n"
opsum: 		.asciiz "summation of the elements is "	
palop:		.asciiz "Palindrome ? "
